part of 'package:brambldart/model.dart';

///
///A block is an atomic piece of data network participates are agreed on.
///
/// A block has:
///- transactional data: a sequence of transactions, where a transaction is an atomic state update.
///Some metadata is possible as well(transactions Merkle tree root, state Merkle tree root etc).
///
///- consensus data to check whether block was generated by a right party in a right way. E.g.
///"baseTarget" & "generatorSignature" fields in the Nxt block structure, nonce & difficulty in the
///Bitcoin block structure.
///
///- a signature(s) of a block generator(s)
///
///- additional data: block structure version no, timestamp etc
///
///

@JsonSerializable(checked: true, explicitToJson: true)
class Block {
  final BlockHeader header;
  final BlockBody body;
  final int blockSize;

  Block(
    this.header,
    this.body,
    this.blockSize,
  );

  /// A necessary factory constructor for creating a new Block instance
  /// from a map. Pass the map to the generated `_$BlockFromJson()` constructor.
  /// The constructor is named after the source class, in this case, Block.
  factory Block.fromJson(Map<String, dynamic> json) => _$BlockFromJson(json);

  /// `toJson` is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method `_$BlockToJson`.
  Map<String, dynamic> toJson() => _$BlockToJson(this);

  Block copyWith({
    BlockHeader? header,
    BlockBody? body,
    int? blockSize,
  }) {
    return Block(
      header ?? this.header,
      body ?? this.body,
      blockSize ?? this.blockSize,
    );
  }

  @override
  String toString() =>
      'Block(header: $header, body: $body, blockSize: $blockSize)';

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is Block &&
        other.header == header &&
        other.body == body &&
        other.blockSize == blockSize;
  }

  @override
  int get hashCode => header.hashCode ^ body.hashCode ^ blockSize.hashCode;
}
